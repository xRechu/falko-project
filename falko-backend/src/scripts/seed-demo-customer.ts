import { ExecArgs } from "@medusajs/framework/types";
import { ContainerRegistrationKeys, Modules } from "@medusajs/framework/utils";

/**
 * Skrypt do utworzenia przyk≈Çadowego u≈ºytkownika do test√≥w
 * Has≈Ço bƒôdzie ustawione przez system rejestracji frontendowej
 */
export default async function seedDemoCustomer({ container }: ExecArgs) {
  const logger = container.resolve(ContainerRegistrationKeys.LOGGER);
  const customerModuleService = container.resolve(Modules.CUSTOMER);
  
  logger.info("Creating demo customer for testing...");

  const demoEmail = "demo@falkoproject.com";

  try {
    // Sprawd≈∫ czy klient ju≈º istnieje
    const existingCustomers = await customerModuleService.listCustomers({
      email: demoEmail,
    });

    if (existingCustomers.length === 0) {
      // Utw√≥rz nowego klienta
      const customer = await customerModuleService.createCustomers({
        email: demoEmail,
        first_name: "Demo",
        last_name: "User",  
        phone: "+48 555 123 456",
      });
      
      logger.info(`‚úÖ Created demo customer: ${customer.email}`);
    } else {
      logger.info(`Demo customer already exists: ${demoEmail}`);
    }

    logger.info("‚úÖ Demo customer setup completed!");
    logger.info("");
    logger.info("üéØ How to test the authentication system:");
    logger.info("");
    logger.info("1. üìù REGISTRATION TEST:");
    logger.info("   ‚Ä¢ Go to: http://localhost:3000/register");
    logger.info("   ‚Ä¢ Use email: demo@falkoproject.com");
    logger.info("   ‚Ä¢ Set password: DemoPassword123!");
    logger.info("   ‚Ä¢ Fill other fields and submit");
    logger.info("");
    logger.info("2. üîê LOGIN TEST:");
    logger.info("   ‚Ä¢ Go to: http://localhost:3000/login");
    logger.info("   ‚Ä¢ Use: demo@falkoproject.com / DemoPassword123!");
    logger.info("");
    logger.info("3. üîÑ PASSWORD RESET TEST:");
    logger.info("   ‚Ä¢ Go to: http://localhost:3000/forgot-password");
    logger.info("   ‚Ä¢ Use email: demo@falkoproject.com");
    logger.info("");
    logger.info("4. üõí SHOPPING TEST:");
    logger.info("   ‚Ä¢ Browse products");
    logger.info("   ‚Ä¢ Add to cart");
    logger.info("   ‚Ä¢ Checkout as logged in user");
    logger.info("");
    logger.info("Alternative test user (if needed):");
    logger.info("  Email: test@falkoproject.com (created by main seed script)");
    
  } catch (error) {
    logger.error("Failed to setup demo customer:", error);
  }

  logger.info("Finished setting up demo customer.");
}
