import { medusaClient, handleApiError, withRetry } from '@/lib/medusa-client';
import { ApiResponse } from './products';

/**
 * API functions dla zarzƒÖdzania koszykiem w Medusa.js
 * U≈ºywamy typ√≥w z @medusajs/medusa-js dla kompatybilno≈õci
 */

// Podstawowe typy requesta
export interface AddToCartRequest {
  variant_id: string;
  quantity: number;
  metadata?: Record<string, any>;
}

export interface UpdateCartItemRequest {
  quantity: number;
  metadata?: Record<string, any>;
}

export interface CreateCartRequest {
  region_id?: string;
  sales_channel_id?: string;
  country_code?: string;
  metadata?: Record<string, any>;
}

/**
 * API functions dla zarzƒÖdzania koszykiem w Medusa.js
 */

/**
 * Tworzy nowy koszyk
 */
export async function createCart(data: CreateCartRequest = {}): Promise<ApiResponse<any>> {
  try {
    console.log('üîÑ Creating new cart...');
    
    const response = await withRetry(async () => {
      return await medusaClient.carts.create({
        country_code: data.country_code || 'PL',
      });
    });

    console.log('‚úÖ Cart created successfully:', response.cart.id);
    return { data: response.cart };
  } catch (error) {
    const apiError = handleApiError(error);
    console.error('‚ùå createCart error:', apiError);
    return { error: apiError };
  }
}

/**
 * Pobiera koszyk po ID
 */
export async function getCart(cartId: string): Promise<ApiResponse<any>> {
  try {
    console.log(`üîÑ Fetching cart ${cartId}...`);
    
    const response = await withRetry(async () => {
      return await medusaClient.carts.retrieve(cartId);
    });

    console.log(`‚úÖ Cart ${cartId} fetched successfully`);
    return { data: response.cart };
  } catch (error) {
    const apiError = handleApiError(error);
    console.error(`‚ùå getCart error for ${cartId}:`, apiError);
    return { error: apiError };
  }
}

/**
 * Dodaje produkt do koszyka
 */
export async function addToCart(
  cartId: string, 
  item: AddToCartRequest
): Promise<ApiResponse<any>> {
  try {
    console.log(`üîÑ Adding item to cart ${cartId}:`, item);
    
    const response = await withRetry(async () => {
      return await medusaClient.carts.lineItems.create(cartId, {
        variant_id: item.variant_id,
        quantity: item.quantity,
      });
    });

    console.log(`‚úÖ Item added to cart ${cartId}`);
    return { data: response.cart };
  } catch (error) {
    const apiError = handleApiError(error);
    console.error(`‚ùå addToCart error for ${cartId}:`, apiError);
    return { error: apiError };
  }
}

/**
 * Aktualizuje ilo≈õƒá produktu w koszyku
 */
export async function updateCartItem(
  cartId: string,
  lineItemId: string,
  data: UpdateCartItemRequest
): Promise<ApiResponse<any>> {
  try {
    console.log(`üîÑ Updating cart item ${lineItemId} in cart ${cartId}:`, data);
    
    const response = await withRetry(async () => {
      return await medusaClient.carts.lineItems.update(cartId, lineItemId, {
        quantity: data.quantity,
      });
    });

    console.log(`‚úÖ Cart item ${lineItemId} updated`);
    return { data: response.cart };
  } catch (error) {
    const apiError = handleApiError(error);
    console.error(`‚ùå updateCartItem error for ${lineItemId}:`, apiError);
    return { error: apiError };
  }
}

/**
 * Usuwa produkt z koszyka
 */
export async function removeFromCart(
  cartId: string,
  lineItemId: string
): Promise<ApiResponse<any>> {
  try {
    console.log(`üîÑ Removing item ${lineItemId} from cart ${cartId}...`);
    
    const response = await withRetry(async () => {
      return await medusaClient.carts.lineItems.delete(cartId, lineItemId);
    });

    console.log(`‚úÖ Item ${lineItemId} removed from cart`);
    return { data: response.cart };
  } catch (error) {
    const apiError = handleApiError(error);
    console.error(`‚ùå removeFromCart error for ${lineItemId}:`, apiError);
    return { error: apiError };
  }
}

/**
 * Usuwa wszystkie produkty z koszyka
 */
export async function clearCart(cartId: string): Promise<ApiResponse<any>> {
  try {
    console.log(`üîÑ Clearing cart ${cartId}...`);
    
    // Pobierz koszyk ≈ºeby zobaczyƒá wszystkie items
    const cartResponse = await getCart(cartId);
    if (!cartResponse.data) {
      return { error: { message: 'Cart not found' } };
    }

    // Usu≈Ñ wszystkie items jeden po drugim
    let updatedCart = cartResponse.data;
    for (const item of updatedCart.items) {
      const removeResponse = await removeFromCart(cartId, item.id);
      if (removeResponse.data) {
        updatedCart = removeResponse.data;
      }
    }

    console.log(`‚úÖ Cart ${cartId} cleared`);
    return { data: updatedCart };
  } catch (error) {
    const apiError = handleApiError(error);
    console.error(`‚ùå clearCart error for ${cartId}:`, apiError);
    return { error: apiError };
  }
}

/**
 * Dodaje email do koszyka (dla go≈õci)
 */
export async function setCartEmail(
  cartId: string, 
  email: string
): Promise<ApiResponse<any>> {
  try {
    console.log(`üîÑ Setting email for cart ${cartId}: ${email}`);
    
    const response = await withRetry(async () => {
      return await medusaClient.carts.update(cartId, {
        email,
      });
    });

    console.log(`‚úÖ Email set for cart ${cartId}`);
    return { data: response.cart };
  } catch (error) {
    const apiError = handleApiError(error);
    console.error(`‚ùå setCartEmail error for ${cartId}:`, apiError);
    return { error: apiError };
  }
}

/**
 * Dodaje region do koszyka
 */
export async function setCartRegion(
  cartId: string, 
  regionId: string
): Promise<ApiResponse<any>> {
  try {
    console.log(`üîÑ Setting region for cart ${cartId}: ${regionId}`);
    
    const response = await withRetry(async () => {
      return await medusaClient.carts.update(cartId, {
        region_id: regionId,
      });
    });

    console.log(`‚úÖ Region set for cart ${cartId}`);
    return { data: response.cart };
  } catch (error) {
    const apiError = handleApiError(error);
    console.error(`‚ùå setCartRegion error for ${cartId}:`, apiError);
    return { error: apiError };
  }
}

/**
 * Pobiera dostƒôpne regiony
 */
export async function getRegions(): Promise<ApiResponse<any[]>> {
  try {
    console.log('üîÑ Fetching regions...');
    
    const response = await withRetry(async () => {
      return await medusaClient.regions.list();
    });

    console.log(`‚úÖ Fetched ${response.regions.length} regions`);
    return { data: response.regions };
  } catch (error) {
    const apiError = handleApiError(error);
    console.error('‚ùå getRegions error:', apiError);
    return { error: apiError };
  }
}
